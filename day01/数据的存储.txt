数据的存储

思考：为什么使用计算机？
存储数据，计算数据


思考：数据存在哪里？
数据存储在内存里


思考：数据怎么在内存里存储的？
首先弄明白怎么存储数字

10
10.5
“sunck is a good man”


内存：
抽象：一个开关，有两种状态，开启和关闭。一种状态对应1，另一种状态对应0。把八个开关放到一间房间里，这个房间称为"一个字节"，一个开关代表"一位"。每个房间都有门牌号，看做"地址"。把无数个房间堆叠起来组成摩天大厦，可以吧摩天大厦看成"内存"



单位
1bit
8bit       ==   一字节
1024字节   ==   1K
1024K      ==   1M
1024M      ==   1G
1024G      ==   1T

内存中以二进制形式存储数据



二进制：  0   1    逢二进一
0 + 0 = 0
0 + 1 = 1
1 + 1 = 10
11 + 1 = 

    11
+  ..1
-------
   100 


八进制：  0  1  2  3   4  5  6  7  逢八进一  
1 + 7 = 10
1 + 2 = 3



十进制： 0  1  2  3  4  5  6  7  8  9   逢十进一



十六进制： 0 1 2 3 4 5 6 7 8 9 a b c d e f  逢十六进一
1 + f = 10
作用：内存地址用十六进制数表示





十进制-》二进制
倒除法，余数逆序

10(10)->1010(2)


二进制-》十进制
当前的数字，乘以2的位数次方，最后相加
0x2^0 + 1x2^1 + 0x2^2 + 1x2^3  = 0 + 2 + 0 + 8 = 10
1010(2)->10(10)


八进制-》二进制
【一转三位】八进制的一位相当于二进制的三位，转换时按照十进制转换

65(8)->110101(2)



十六进制-》二进制
【一转四位】十六进制的一位相当于二进制的四位，转换时按照十进制转换
a4(16)->10100100(2)


二进制-》八进制
【三位一取】从低位开始取，高位不够补0
110101(2)->65(8)



二进制-》十六进制
【四位一取】从低位开始取，高位不够补0










十进制    二级制     八进制     十六进制
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15




10(10)->1010(2)
数据存储：计算机存储数据，先开辟内存空间，再存储数据。计算机开辟内存的最小单位是字节。在存储数据时，用最高位标识符号，1负数表示，0表示正数




00000000000000000000000000000001
10000000000000000000000000000001
---------------------------------
10000000000000000000000000000010





原码、反码、补码


原码：规定了字节数，写明了符号位，就得到了数据的原码
00000000000000000000000000000001
10000000000000000000000000000001
---------------------------------
10000000000000000000000000000010


反码：正数的反码是其原码，负数的反码是其原码的符号位不动，其他位取反
00000000000000000000000000000001
11111111111111111111111111111110
-----------------------------------
11111111111111111111111111111111


补码：正数的补码是其原码，负数的补码是其反码加1
  00000000000000000000000000000001
  11111111111111111111111111111111
-----------------------------------
 100000000000000000000000000000000



结论：计算机以补码的形式存储数据







交互模式



绝对路径：从根目录开始链接的路径
C:\Users\xlg\Desktop\Python-1704\day01

相对路径：不从根目录开始链接的路径
xlg\Desktop\Python-1704\day01

命令行模式
Python 程序文件以.py结尾的


dir  查看当前目录下的所有文件
cd  路径    跳转到指定目录
cd  ..    ..代表的是上一级目录

